// pellet 3D debug diagram

// coordinate system


translate([-128, -128, -128]) {
	// X = R
	rotate([0, 90, 0])
		arrow(1, 0, 0);
	
	// Y = G
	rotate([-90, 0, 0])
		arrow(0, 1, 0);
	
	// Z = B
		arrow(0, 0, 1);
	
	
	// cube lines 255x255x255
	// 3 vertiacal lines
	translate([255, 0, 0])
		line();
	translate([255, 255, 0])
		line();
	translate([0, 255, 0])
		line();
	
	// 2 bottom lines
	translate([0, 255, 0])
		rotate([0, 90, 0])
			line();
	translate([255, 0, 0])
		rotate([-90, 0, 0])
			line();
	
	// 4 top lines
	translate([0, 0, 255])
		rotate([0, 90, 0])
			line();
	translate([0, 255, 255])
		rotate([0, 90, 0])
			line();
	translate([0, 0, 255])
		rotate([-90, 0, 0])
			line();
	translate([255, 0, 255])
		rotate([-90, 0, 0])
			line();
}

// ====================================================
// sub-modules
// ====================================================

module arrow(R, G, B) {
	dim = .66;
	len = 280;
	head = 20;

	translate([0, 0, len / 2])
		color([R * dim, G * dim, B * dim])
			cylinder(r = 1, h = len, center=true);

	translate([0, 0, len + head / 2])
		color([R * dim, G * dim, B * dim])
			cylinder(r1 = 5, r2 = 0, h = head, center=true);
}


module line() {
	len = 255;

	translate([0, 0, len / 2])
		color([.5,, .5, .5])
			cylinder(r = .33, h = len, center=true);
}


// markers will be moved to -128...
module marker(x, y, z) {
	len = 32;

	translate([x - 128, y - 128, z - 128]) {
		color([0,0,0, .33]) {
			cylinder(r = .33, h = len, center=true);
			rotate([-90, 0, 0]) cylinder(r = .33, h = len, center=true);
			rotate([0, 90, 0])  cylinder(r = .33, h = len, center=true);
		}
		color([1, 1, 1, .1])
			sphere(r=30, center=true);
	}
}


// dots will be moved to -128...
module dot(x, y, z, c) {
	len = 3.33;

	translate([x - 128, y - 128, z - 128])
		color(c)
			sphere(r = len/2, $fn = 12, center=true);
}


// ====================================================
// automated content follows
// ====================================================

// # RGB_values.csv --- 12.04.2014
// # pellet colors --- greys
dot(242.0, 239.0, 0.0, [0.7372549, 0.6862745, 0.0627451]);
dot(63.0, 41.0, 17.0, [0.23921569, 0.14509805, 0.06666667]);
dot(44.0, 17.0, 5.0, [0.23921569, 0.14509805, 0.06666667]);
dot(40.0, 18.0, 5.0, [0.23921569, 0.14509805, 0.06666667]);
dot(58.0, 32.0, 14.0, [0.23921569, 0.14509805, 0.06666667]);
dot(55.0, 29.0, 11.0, [0.23921569, 0.14509805, 0.06666667]);
dot(66.0, 51.0, 22.0, [0.23921569, 0.14509805, 0.06666667]);
dot(68.0, 45.0, 22.0, [0.23921569, 0.14509805, 0.06666667]);
dot(80.0, 47.0, 26.0, [0.23921569, 0.14509805, 0.06666667]);
dot(76.0, 67.0, 31.0, [0.23921569, 0.14509805, 0.06666667]);
dot(64.0, 39.0, 17.0, [0.23921569, 0.14509805, 0.06666667]);
dot(64.0, 37.0, 18.0, [0.23921569, 0.14509805, 0.06666667]);
dot(51.0, 25.0, 8.0, [0.23921569, 0.14509805, 0.06666667]);
dot(43.0, 27.0, 7.0, [0.23921569, 0.14509805, 0.06666667]);
dot(48.0, 24.0, 9.0, [0.23921569, 0.14509805, 0.06666667]);
dot(87.0, 54.0, 32.0, [0.23921569, 0.14509805, 0.06666667]);
dot(84.0, 52.0, 30.0, [0.23921569, 0.14509805, 0.06666667]);
dot(38.0, 15.0, 3.0, [0.23921569, 0.14509805, 0.06666667]);
// # pellet colors
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(1.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 222.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 203.0, [0.9647059, 0.9647059, 0.8509804]);
dot(24.0, 37.0, 86.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 246.0, 220.0, [0.9647059, 0.9647059, 0.8509804]);
dot(9.0, 114.0, 5.0, [0.019607844, 0.42745098, 0.011764706]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 242.0, 23.0, [0.7372549, 0.6862745, 0.0627451]);
dot(245.0, 8.0, 1.0, [0.8862745, 0.023529412, 0.007843138]);
dot(26.0, 34.0, 77.0, [0.0627451, 0.10980392, 0.29803923]);
dot(27.0, 39.0, 87.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 246.0, 221.0, [0.9647059, 0.9647059, 0.8509804]);
dot(245.0, 8.0, 3.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 243.0, 23.0, [0.7372549, 0.6862745, 0.0627451]);
dot(245.0, 14.0, 6.0, [0.8862745, 0.023529412, 0.007843138]);
dot(17.0, 116.0, 13.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 244.0, 33.0, [0.7372549, 0.6862745, 0.0627451]);
dot(247.0, 247.0, 243.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 243.0, 30.0, [0.7372549, 0.6862745, 0.0627451]);
dot(246.0, 246.0, 227.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(11.0, 111.0, 7.0, [0.019607844, 0.42745098, 0.011764706]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 233.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 237.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 222.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(25.0, 38.0, 87.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 246.0, 228.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 230.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 13.0, 5.0, [0.8862745, 0.023529412, 0.007843138]);
dot(28.0, 40.0, 87.0, [0.0627451, 0.10980392, 0.29803923]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(15.0, 107.0, 8.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 246.0, 227.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 243.0, 21.0, [0.7372549, 0.6862745, 0.0627451]);
dot(18.0, 26.0, 75.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 246.0, 220.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 206.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 224.0, [0.9647059, 0.9647059, 0.8509804]);
dot(2.0, 100.0, 0.0, [0.019607844, 0.42745098, 0.011764706]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(10.0, 22.0, 71.0, [0.0627451, 0.10980392, 0.29803923]);
dot(2.0, 102.0, 1.0, [0.019607844, 0.42745098, 0.011764706]);
dot(11.0, 19.0, 65.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 241.0, 8.0, [0.7372549, 0.6862745, 0.0627451]);
dot(9.0, 16.0, 61.0, [0.0627451, 0.10980392, 0.29803923]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 202.0, [0.9647059, 0.9647059, 0.8509804]);
dot(2.0, 107.0, 1.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 246.0, 213.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 203.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 212.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 209.0, [0.9647059, 0.9647059, 0.8509804]);
dot(2.0, 104.0, 0.0, [0.019607844, 0.42745098, 0.011764706]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(244.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 187.0, [0.9647059, 0.9647059, 0.8509804]);
dot(2.0, 101.0, 0.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 246.0, 216.0, [0.9647059, 0.9647059, 0.8509804]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 246.0, 196.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 231.0, 3.0, [0.7372549, 0.6862745, 0.0627451]);
dot(8.0, 18.0, 65.0, [0.0627451, 0.10980392, 0.29803923]);
dot(3.0, 120.0, 2.0, [0.019607844, 0.42745098, 0.011764706]);
dot(247.0, 244.0, 9.0, [0.7372549, 0.6862745, 0.0627451]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 247.0, 230.0, [0.9647059, 0.9647059, 0.8509804]);
dot(245.0, 5.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(8.0, 24.0, 75.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 247.0, 227.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 210.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 211.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 205.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 202.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 233.0, 5.0, [0.7372549, 0.6862745, 0.0627451]);
dot(246.0, 246.0, 211.0, [0.9647059, 0.9647059, 0.8509804]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(7.0, 18.0, 67.0, [0.0627451, 0.10980392, 0.29803923]);
dot(7.0, 19.0, 66.0, [0.0627451, 0.10980392, 0.29803923]);
dot(2.0, 105.0, 0.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 229.0, 3.0, [0.7372549, 0.6862745, 0.0627451]);
dot(247.0, 246.0, 229.0, [0.9647059, 0.9647059, 0.8509804]);
dot(1.0, 96.0, 0.0, [0.019607844, 0.42745098, 0.011764706]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 241.0, 5.0, [0.7372549, 0.6862745, 0.0627451]);
dot(2.0, 107.0, 0.0, [0.019607844, 0.42745098, 0.011764706]);
dot(7.0, 21.0, 72.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 246.0, 212.0, [0.9647059, 0.9647059, 0.8509804]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 241.0, 5.0, [0.7372549, 0.6862745, 0.0627451]);
dot(246.0, 242.0, 6.0, [0.7372549, 0.6862745, 0.0627451]);
dot(246.0, 246.0, 203.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 210.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 216.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 210.0, [0.9647059, 0.9647059, 0.8509804]);
dot(2.0, 107.0, 0.0, [0.019607844, 0.42745098, 0.011764706]);
dot(7.0, 19.0, 70.0, [0.0627451, 0.10980392, 0.29803923]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(2.0, 105.0, 0.0, [0.019607844, 0.42745098, 0.011764706]);
dot(1.0, 110.0, 0.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 225.0, 4.0, [0.7372549, 0.6862745, 0.0627451]);
dot(6.0, 17.0, 66.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 246.0, 217.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(247.0, 247.0, 230.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 222.0, [0.9647059, 0.9647059, 0.8509804]);
dot(11.0, 23.0, 70.0, [0.0627451, 0.10980392, 0.29803923]);
dot(10.0, 22.0, 73.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 246.0, 207.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(8.0, 20.0, 68.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 241.0, 6.0, [0.7372549, 0.6862745, 0.0627451]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 246.0, 216.0, [0.9647059, 0.9647059, 0.8509804]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 246.0, 220.0, [0.9647059, 0.9647059, 0.8509804]);
dot(248.0, 248.0, 246.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 243.0, 12.0, [0.7372549, 0.6862745, 0.0627451]);
dot(15.0, 30.0, 83.0, [0.0627451, 0.10980392, 0.29803923]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 241.0, 14.0, [0.7372549, 0.6862745, 0.0627451]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(20.0, 33.0, 87.0, [0.0627451, 0.10980392, 0.29803923]);
dot(245.0, 1.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(7.0, 122.0, 5.0, [0.019607844, 0.42745098, 0.011764706]);
dot(247.0, 244.0, 20.0, [0.7372549, 0.6862745, 0.0627451]);
dot(246.0, 237.0, 17.0, [0.7372549, 0.6862745, 0.0627451]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 216.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 212.0, [0.9647059, 0.9647059, 0.8509804]);
dot(4.0, 109.0, 2.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 221.0, 8.0, [0.7372549, 0.6862745, 0.0627451]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(2.0, 113.0, 1.0, [0.019607844, 0.42745098, 0.011764706]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(245.0, 10.0, 3.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 246.0, 215.0, [0.9647059, 0.9647059, 0.8509804]);
dot(30.0, 42.0, 95.0, [0.0627451, 0.10980392, 0.29803923]);
dot(1.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 19.0, 11.0, [0.8862745, 0.023529412, 0.007843138]);
dot(1.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 16.0, 8.0, [0.8862745, 0.023529412, 0.007843138]);
dot(33.0, 46.0, 93.0, [0.0627451, 0.10980392, 0.29803923]);
dot(2.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 20.0, 11.0, [0.8862745, 0.023529412, 0.007843138]);
dot(245.0, 18.0, 11.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 246.0, 243.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 244.0, 34.0, [0.7372549, 0.6862745, 0.0627451]);
dot(34.0, 48.0, 93.0, [0.0627451, 0.10980392, 0.29803923]);
dot(246.0, 246.0, 235.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 244.0, 38.0, [0.7372549, 0.6862745, 0.0627451]);
dot(246.0, 243.0, 34.0, [0.7372549, 0.6862745, 0.0627451]);
dot(34.0, 42.0, 90.0, [0.0627451, 0.10980392, 0.29803923]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 12.0, 5.0, [0.8862745, 0.023529412, 0.007843138]);
dot(11.0, 115.0, 8.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 245.0, 32.0, [0.7372549, 0.6862745, 0.0627451]);
dot(11.0, 105.0, 6.0, [0.019607844, 0.42745098, 0.011764706]);
dot(13.0, 129.0, 11.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 246.0, 231.0, [0.9647059, 0.9647059, 0.8509804]);
dot(24.0, 34.0, 84.0, [0.0627451, 0.10980392, 0.29803923]);
dot(11.0, 116.0, 7.0, [0.019607844, 0.42745098, 0.011764706]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 246.0, 222.0, [0.9647059, 0.9647059, 0.8509804]);
dot(7.0, 107.0, 4.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 246.0, 213.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 217.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 1.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 236.0, 12.0, [0.7372549, 0.6862745, 0.0627451]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(245.0, 238.0, 9.0, [0.7372549, 0.6862745, 0.0627451]);
dot(246.0, 236.0, 11.0, [0.7372549, 0.6862745, 0.0627451]);
dot(245.0, 0.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 246.0, 207.0, [0.9647059, 0.9647059, 0.8509804]);
dot(245.0, 1.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(4.0, 112.0, 2.0, [0.019607844, 0.42745098, 0.011764706]);
dot(16.0, 28.0, 78.0, [0.0627451, 0.10980392, 0.29803923]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 239.0, 12.0, [0.7372549, 0.6862745, 0.0627451]);
dot(246.0, 246.0, 215.0, [0.9647059, 0.9647059, 0.8509804]);
dot(6.0, 114.0, 3.0, [0.019607844, 0.42745098, 0.011764706]);
dot(15.0, 23.0, 68.0, [0.0627451, 0.10980392, 0.29803923]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(3.0, 101.0, 1.0, [0.019607844, 0.42745098, 0.011764706]);
dot(14.0, 23.0, 73.0, [0.0627451, 0.10980392, 0.29803923]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(4.0, 104.0, 1.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 246.0, 212.0, [0.9647059, 0.9647059, 0.8509804]);
dot(245.0, 1.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 246.0, 216.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 231.0, 8.0, [0.7372549, 0.6862745, 0.0627451]);
dot(4.0, 111.0, 1.0, [0.019607844, 0.42745098, 0.011764706]);
dot(246.0, 246.0, 221.0, [0.9647059, 0.9647059, 0.8509804]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
dot(246.0, 245.0, 185.0, [0.9647059, 0.9647059, 0.8509804]);
dot(246.0, 246.0, 221.0, [0.9647059, 0.9647059, 0.8509804]);
dot(245.0, 1.0, 0.0, [0.8862745, 0.023529412, 0.007843138]);
dot(246.0, 246.0, 211.0, [0.9647059, 0.9647059, 0.8509804]);
dot(13.0, 25.0, 74.0, [0.0627451, 0.10980392, 0.29803923]);
dot(0.0, 0.0, 0.0, [0.0, 0.0, 0.0]);
marker(0, 0, 0);
marker(16, 28, 76);
marker(5, 109, 3);
marker(244, 4, 2);
marker(245, 238, 14);
marker(246, 246, 217);
marker(60, 36, 16);
